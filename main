import pygame, time, random

pygame.init()
screen_size = width, height = 800, 600
screen = pygame.display.set_mode(screen_size)
pygame.display.set_caption('Snake!')

block = 10
snake_color = (37, 66, 82)
background_color = (234,181,111)

clock = pygame.time.Clock()

def message(msg, font_size, color, y_loc = 3*600/7):
    font = pygame.font.SysFont(None, font_size)
    text = font.render(msg, True, color)
    text_rect = text.get_rect(center=(width/2, y_loc))
    screen.blit(text, text_rect)

# class snake:
#     def __init__(self) -> None:
#         pass
#     def snake_

class food:
    # Creating food for the snake. Each coordinate is rounded to 10 px, they are recreated until there is no collision with the snake
    def __init__(self, player_xy) -> None:
        self.player_xy = player_xy
    def food_x(self):
        return round(random.randrange(0, width-block)/10)*10
    def food_y(self):
        return round(random.randrange(0, height-block)/10)*10

    def food_creation(self):
        food_xy = [self.food_x(), self.food_y()]
        while food_xy == self.player_xy:
            food_xy = [self.food_x(), self.food_y()]
        return food_xy

def snake_move(snake_length, movement, new_movement):
    # Exception for reversed movement: if player is longer than 1 and goes right, he cannot go left etc
    if snake_length == 1: movement = new_movement
    elif new_movement != [-x for x in movement]:
            movement = new_movement
    return movement

def player_score(length):
    score = (length-1)*10
    scoring_msg = pygame.font.SysFont(None, 15).render("Score: " +str(score), True, (0, 0, 0))
    screen.blit(scoring_msg, [10,10])


def start_menu(game_loop):
    pause = True
    # pygame.event.clear()
    while pause:
        event = pygame.event.wait()
        message('SNAKE', 30, (255,102,100), height/4)
        message('Press any key to start the game', 30, (255,102,100), height/3)
        pygame.display.update()
        if event.type == pygame.KEYDOWN:
            # if event.type == pygame.QUIT: 
            #     pause=False
            if event.key == pygame.K_ESCAPE: #or event.type == pygame.QUIT: 
                # pygame.quit()
                # quit() 
                pause = False
            if event.key != pygame.K_ESCAPE:
                pause = False
    return game_loop

def quit_game():
    game_loop = False
    game_over = False
    return game_loop, game_over

def game_pause(game_loop):
    pause = True
    pygame.event.clear()
    while pause:
        event = pygame.event.wait()
        message('Game Paused. Press P to continue', 30, (255, 0, 255))
        pygame.display.update()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                game_loop = False
                pause = False
                return game_loop
            if event.key == pygame.K_p:
                pause = False
    return game_loop
    

def main():
    game_loop = True
    game_over = False

    player_xy = [width/2, height/2]
    head = player_xy.copy()
    snake_coords = []
    snake_coords.append(head)
    snake_length = 1
    movement =[0,0]

    f = food(player_xy)
    food_xy = f.food_creation()

    screen.fill((0,0,0))
    game_loop = start_menu(game_loop)

    while game_loop:
        
        while game_over:
            if event.type == pygame.QUIT: 
                game_loop, game_over = quit_game()
            message('Game over. Press SPACE to play again or ESC to exit', 30, (255, 0, 255))
            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:    
                    if event.key == pygame.K_ESCAPE: 
                        game_loop, game_over = quit_game()
                    if event.key == pygame.K_SPACE: main()

        # Keyboard Control 
        for event in pygame.event.get():
            if event.type == pygame.QUIT: game_loop = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    new_movement = [-block, 0]
                    movement = snake_move(snake_length, movement, new_movement)
                if event.key == pygame.K_RIGHT:
                    new_movement = [block, 0]
                    movement = snake_move(snake_length, movement, new_movement)
                if event.key == pygame.K_UP:
                    new_movement = [0, -block]
                    movement = snake_move(snake_length, movement, new_movement)
                if event.key == pygame.K_DOWN:
                    new_movement = [0, block]
                    movement = snake_move(snake_length, movement, new_movement)   
                if event.key == pygame.K_p: 
                    game_loop = game_pause(game_loop)
                if event.key == pygame.K_ESCAPE: 
                    game_loop, game_over = quit_game()
                        

        player_xy[0] = player_xy[0]+movement[0]
        player_xy[1] = player_xy[1]+movement[1]

        # Collision with wall 
        if player_xy[0] < 0 or player_xy[0] > width or player_xy[1] < 0 or player_xy[1] > height:
            game_over = True

        # Collision with itself
        for coordinate in snake_coords[:-1]:
            if coordinate == player_xy: game_over = True

        # Eating food
        if player_xy == food_xy:
            food_xy = f.food_creation()
            snake_length+=1
        
        

        # Snake coordinates
        if player_xy != snake_coords[-1]: #ensuring part of snake won't disappear if the loop is too fast
            head = player_xy.copy()
            snake_coords.append(head)
        if len(snake_coords) > snake_length:
            del snake_coords[0]
        print(snake_coords)
        
        # Image refresh
        screen.fill(background_color)
        pygame.draw.rect(screen,(0,255,0),[food_xy[0], food_xy[1], block, block])
        for coordinate in snake_coords:
            pygame.draw.rect(screen,snake_color,[coordinate[0], coordinate[1], block, block])
        
        player_score(snake_length) #scoring
        pygame.display.update()

        clock.tick(30)
    
    pygame.quit()
    quit()  

main()